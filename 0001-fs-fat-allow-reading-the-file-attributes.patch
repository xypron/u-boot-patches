From fe8196e56c3aef4f58b4eceb144adf83c03e171f Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 15 May 2021 13:13:07 +0200
Subject: [PATCH 1/1] fs: fat: allow reading the file attributes

Provide a function fs_attr() to read file attributes like read-only.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 fs/fat/fat.c  | 37 +++++++++++++++++++++++++++++++++++++
 fs/fs.c       | 25 ++++++++++++++++++++++++-
 include/fat.h |  1 +
 include/fs.h  | 16 ++++++++++++++++
 4 files changed, 78 insertions(+), 1 deletion(-)

diff --git a/fs/fat/fat.c b/fs/fat/fat.c
index 2d8aab0edb..325d0f4f4b 100644
--- a/fs/fat/fat.c
+++ b/fs/fat/fat.c
@@ -1242,6 +1242,43 @@ static void __maybe_unused fat2rtc(u16 date, u16 time, struct rtc_time *tm)
 	tm->tm_isdst = 0;
 }
 
+/**
+ * fat_attr() - get file attributes
+ *
+ * @filename:	path to file or directory
+ * @attrib:	buffer to receive file attributes
+ * Return:	0 on success, -errno otherwise
+ */
+int fat_attr(const char *filename, struct fs_file_attributes *attrib)
+{
+	fsdata fsdata;
+	fat_itr *itr;
+	int ret;
+
+	ret = fat_open(filename, TYPE_ANY, &itr, &fsdata);
+	if (ret)
+		return ret;
+	if (!itr->dent) {
+		memset(attrib, 0, sizeof(struct fs_file_attributes));
+		attrib->flags = FS_ATTR_DIR;
+		return 0;
+	}
+	attrib->flags = itr->dent->attr;
+
+	fat2rtc(le16_to_cpu(itr->dent->cdate), le16_to_cpu(itr->dent->ctime),
+		&attrib->create_time);
+	fat2rtc(le16_to_cpu(itr->dent->date), le16_to_cpu(itr->dent->time),
+		&attrib->change_time);
+	fat2rtc(le16_to_cpu(itr->dent->adate), 0, &attrib->access_time);
+	if (itr->dent->attr & FS_ATTR_DIR)
+		attrib->size = 0;
+	else
+		attrib->size = FAT2CPU32(itr->dent->size);
+	free(fsdata.fatbuf);
+	free(itr);
+	return 0;
+}
+
 /**
  * fat_size() - get file size
  *
diff --git a/fs/fs.c b/fs/fs.c
index b7936fd4cf..b274e1cc3e 100644
--- a/fs/fs.c
+++ b/fs/fs.c
@@ -149,6 +149,9 @@ struct fstype_info {
 	int (*ls)(const char *dirname);
 	int (*exists)(const char *filename);
 	int (*size)(const char *filename, loff_t *size);
+#if CONFIG_IS_ENABLED(EFI_LOADER) || CONFIG_IS_ENABLED(CMD_ATTRIB)
+	int (*attr)(const char *filename, struct fs_file_attributes *attrib);
+#endif
 	int (*read)(const char *filename, void *buf, loff_t offset,
 		    loff_t len, loff_t *actread);
 	int (*write)(const char *filename, void *buf, loff_t offset,
@@ -184,8 +187,11 @@ static struct fstype_info fstypes[] = {
 		.close = fat_close,
 		.ls = fs_ls_generic,
 		.exists = fat_exists,
-		.size = fat_size,
 		.read = fat_read_file,
+#if CONFIG_IS_ENABLED(EFI_LOADER) || CONFIG_IS_ENABLED(CMD_ATTRIB)
+		.attr = fat_attr,
+#endif
+		.size = fat_size,
 #if CONFIG_IS_ENABLED(FAT_WRITE)
 		.write = file_fat_write,
 		.unlink = fat_unlink,
@@ -475,6 +481,23 @@ int fs_exists(const char *filename)
 	return ret;
 }
 
+#if CONFIG_IS_ENABLED(EFI_LOADER) || CONFIG_IS_ENABLED(CMD_ATTRIB)
+int fs_attr(const char *filename, struct fs_file_attributes *attrib)
+{
+	struct fstype_info *info = fs_get_info(fs_type);
+	int ret;
+
+	if (!info->attr)
+		return -ENOSYS;
+
+	ret = info->attr(filename, attrib);
+
+	fs_close();
+
+	return ret;
+}
+#endif
+
 int fs_size(const char *filename, loff_t *size)
 {
 	int ret;
diff --git a/include/fat.h b/include/fat.h
index 0a644c138e..89f73c98b4 100644
--- a/include/fat.h
+++ b/include/fat.h
@@ -192,6 +192,7 @@ static inline u32 sect_to_clust(fsdata *fsdata, int sect)
 
 int file_fat_detectfs(void);
 int fat_exists(const char *filename);
+int fat_attr(const char *filename, struct fs_file_attributes *attrib);
 int fat_size(const char *filename, loff_t *size);
 int file_fat_read_at(const char *filename, loff_t pos, void *buffer,
 		     loff_t maxsize, loff_t *actread);
diff --git a/include/fs.h b/include/fs.h
index 100087f4e8..6396a19eb5 100644
--- a/include/fs.h
+++ b/include/fs.h
@@ -40,6 +40,22 @@ enum fs_file_attrib {
 	FS_ATTR_ARCH =		0x20,
 };
 
+/**
+ * struct fs_file_attributes - file attributes
+ */
+struct fs_file_attributes {
+	/** @size:		file size */
+	loff_t size;
+	/** @flags:		attribute flags (FS_ATTR_*) */
+	u32 flags;
+	/** create_time:	time of creation */
+	struct rtc_time create_time;
+	/** access_time:	time of last access */
+	struct rtc_time access_time;
+	/** change_time:	time of last modification */
+	struct rtc_time change_time;
+};
+
 struct blk_desc;
 
 /**
-- 
2.30.2

