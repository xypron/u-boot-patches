From 8a49470282daae48c8ec63c6fc0bcfd14f3f7c5e Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Mon, 9 Jul 2018 17:51:07 +0200
Subject: [PATCH 1/1] lib: charset: utility functions for utf-16

utf16_next() - get next utf code point

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/charset.h | 19 ++++++++++++++++++
 lib/charset.c     | 49 ++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 65 insertions(+), 3 deletions(-)

diff --git a/include/charset.h b/include/charset.h
index 2307559890..42b6c025bb 100644
--- a/include/charset.h
+++ b/include/charset.h
@@ -12,6 +12,25 @@
 
 #define MAX_UTF8_PER_UTF16 3
 
+/**
+ * utf16_next - get next UTF-16 code point
+ *
+ * @src:		pointer to current word, updated to point to next word
+ * Return:		code point, or 0 for end of string, or -1 if no legal
+ *			code point is found. In case of an error src points to
+ *			the incorrect word.
+ */
+s32 utf16_next(const u16 **src);
+
+/**
+ * utf16_utf8_strlen() - length of a utf-16 string after conversion to utf-8
+ *
+ * @src:		utf-16 string
+ * Return:		length in bytes after conversion to utf-8 without the
+ *			trailing \0. -1 if the utf-16 string is not valid.
+ */
+ssize_t utf16_utf8_strlen(const u16 *src);
+
 /**
  * u16_strlen - count non-zero words
  *
diff --git a/lib/charset.c b/lib/charset.c
index 8ff8d59957..ccacd5f1ff 100644
--- a/lib/charset.c
+++ b/lib/charset.c
@@ -8,9 +8,52 @@
 #include <charset.h>
 #include <malloc.h>
 
-/*
- * utf8/utf16 conversion mostly lifted from grub
- */
+s32 utf16_next(const u16 **src) {
+	s32 code, code2;
+
+	if (!**src)
+		return 0;
+	code = **src;
+	++*src;
+	if (code >= 0xD800 && code <= 0xDBFF) {
+		if (!**src)
+			return -1;
+		code &= 0x3ff;
+		code <<= 10;
+		code += 0x10000;
+		code2 = **src;
+		if (code2 <= 0xDC00 || code2 >= 0xDFFF)
+			return -1;
+		++*src;
+		code2 &= 0x3ff;
+		code += code2;
+	}
+	return code;
+}
+
+ssize_t utf16_utf8_strlen(const u16 *src)
+{
+	size_t len = 0;
+
+	for (; *src; ++src)  {
+		s32 code = utf16_next(&src);
+		if (!code)
+			break;
+		if (code < 0)
+			return -1;
+		if (code < 0x80)
+			len += 1;
+		else if (code < 0x800)
+			len += 2;
+		else if (code < 0x10000)
+			len += 3;
+		else if (code < 0x110000)
+			len += 4;
+		else
+			return -1;
+	}
+	return len;
+}
 
 size_t u16_strlen(const u16 *in)
 {
-- 
2.18.0

