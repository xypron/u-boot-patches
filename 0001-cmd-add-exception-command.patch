From dfe6ae050b21c85f4fe90a193dd26c89ec725f8b Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Thu, 10 May 2018 13:03:12 +0200
Subject: [PATCH 1/1] cmd: add exception command

The 'exception' command allows to test exception handling.

This version supports ARM 32bit and the following exceptions:
* 'breakpoint' - prefetch abort exception
* 'unaligned'  - data abort exception
* 'undefined'  - undefined instruction exception

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 cmd/Kconfig     |   6 +++
 cmd/Makefile    |   1 +
 cmd/exception.c | 136 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 143 insertions(+)
 create mode 100644 cmd/exception.c

diff --git a/cmd/Kconfig b/cmd/Kconfig
index eb14e08f773..32a9d656e12 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -1261,6 +1261,12 @@ config CMD_DISPLAY
 	  displayed on a simple board-specific display. Implement
 	  display_putc() to use it.
 
+config CMD_EXCEPTION
+	bool "Enable the 'exception' command"
+	depends on ARM && !ARM64
+	help
+	  Enable the 'exception' command which allows to raise an exception.
+
 config CMD_LED
 	bool "led"
 	default y if LED
diff --git a/cmd/Makefile b/cmd/Makefile
index 0d7322ee0a4..becf8aa362c 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -43,6 +43,7 @@ obj-$(CONFIG_CMD_DIAG) += diag.o
 endif
 obj-$(CONFIG_CMD_DISPLAY) += display.o
 obj-$(CONFIG_CMD_ECHO) += echo.o
+obj-$(CONFIG_CMD_EXCEPTION) += exception.o
 obj-$(CONFIG_ENV_IS_IN_EEPROM) += eeprom.o
 obj-$(CONFIG_CMD_EEPROM) += eeprom.o
 obj-$(CONFIG_EFI_STUB) += efi.o
diff --git a/cmd/exception.c b/cmd/exception.c
new file mode 100644
index 00000000000..7c647c64b3b
--- /dev/null
+++ b/cmd/exception.c
@@ -0,0 +1,136 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * The 'exception' command can be used for testing exception handling.
+ *
+ * Copyright (c) 2018, Heinrich Schuchardt <xypron.glpk@gmx.de>
+ */
+#include <common.h>
+#include <command.h>
+
+enum exception {
+	UNDEFINED_INSTRUCTION = 1,
+	DATA_ABORT,
+	BREAKPOINT,
+};
+
+struct exception_str {
+	enum exception id;
+	char *text;
+	void (*func)(void);
+};
+
+#if defined(CONFIG_ARM) && !defined(CONFIG_ARM64)
+static void data_abort(void)
+{
+	/*
+	 * The LDRD instruction requires the data source to be four byte aligned
+	 * even if strict alignment fault checking is disabled in the system
+	 * control register.
+	 */
+	asm volatile (
+		"MOV r5, sp\n"
+		"ADD r5, #1\n"
+		"LDRD r6, r7, [r5]\n");
+}
+
+static void breakpoint(void)
+{
+	asm volatile ("BKPT #123\n");
+}
+
+static void undefined_instruction(void)
+{
+	/*
+	 * 0xe7f...f.	is undefined in ARM mode
+	 * 0xde..	is undefined in Thumb mode
+	 */
+	asm volatile (".word 0xe7f7defb\n");
+}
+#endif
+
+struct exception_str exceptions[] = {
+#if defined(CONFIG_ARM) && !defined(CONFIG_ARM64)
+	{ BREAKPOINT, "breakpoint", breakpoint },
+	{ DATA_ABORT, "unaligned", data_abort },
+	{ UNDEFINED_INSTRUCTION, "undefined", undefined_instruction },
+#endif
+	{ 0, NULL, NULL },
+};
+
+static int do_exception(cmd_tbl_t *cmdtp, int flag, int argc,
+			char * const argv[])
+{
+	struct exception_str *ex;
+	enum exception id = 0;
+
+	if (argc != 2)
+		return CMD_RET_USAGE;
+
+	for (ex = exceptions; ex->func ; ++ex) {
+		if (!strcmp(argv[1], ex->text)) {
+			id = ex->id;
+			break;
+		}
+	}
+	switch (id) {
+#if defined(CONFIG_ARM) && !defined(CONFIG_ARM64)
+	case BREAKPOINT:
+		breakpoint();
+		break;
+	case DATA_ABORT:
+		data_abort();
+		break;
+	case UNDEFINED_INSTRUCTION:
+		undefined_instruction();
+		break;
+#endif
+	default:
+		return CMD_RET_USAGE;
+	}
+
+	return CMD_RET_FAILURE;
+}
+
+static int exception_complete(int argc, char * const argv[], char last_char,
+			      int maxv, char *cmdv[])
+{
+	int len = 0;
+	struct exception_str *ex;
+	int i = 0;
+
+	switch (argc) {
+	case 1:
+		break;
+	case 2:
+		len = strlen(argv[1]);
+		break;
+	default:
+		return 0;
+	}
+	for (ex = exceptions; ex->func ; ++ex) {
+		if (i >= maxv - 1)
+			return i;
+		if (!strncmp(argv[1], ex->text, len))
+			cmdv[i++] = ex->text;
+	}
+	cmdv[i] = NULL;
+	return i;
+}
+
+#ifdef CONFIG_SYS_LONGHELP
+static char exception_help_text[] =
+	"<ex>\n"
+	"  The following exceptions are available:\n"
+#if defined(CONFIG_ARM) && !defined(CONFIG_ARM64)
+	"  breakpoint - prefetch abort\n"
+	"  unaligned  - data abort\n"
+	"  undefined  - undefined instruction\n"
+#endif
+	;
+#endif
+
+U_BOOT_CMD_COMPLETE(
+	exception, 2, 0, do_exception,
+	"Forces an exception to occur",
+	exception_help_text, exception_complete
+);
-- 
2.14.2

