From c6dd43d1eed3c0133fffe1098f59ea42d0c7cb21 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 22 Nov 2020 09:58:44 +0100
Subject: [PATCH 1/1] fs: fat: fat_find_empty_dentries()

Provide a function to find a series of empty directory entries.

The current directory is scanned for deleted entries.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 fs/fat/fat_write.c | 73 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 73 insertions(+)

diff --git a/fs/fat/fat_write.c b/fs/fat/fat_write.c
index 021149509b..ccbbd6cfba 100644
--- a/fs/fat/fat_write.c
+++ b/fs/fat/fat_write.c
@@ -206,6 +206,79 @@ static int flush_dirty_fat_buffer(fsdata *mydata)
 	return 0;
 }
 
+/**
+ * fat_move_to_cluster() - position to first directory entry in @cluster
+ *
+ * @itr:	directory iterator
+ * @cluster	cluster
+ * Return:	0 for success, -EIO on error
+ */
+static int fat_move_to_cluster(fat_itr *itr, unsigned int cluster)
+{
+	unsigned int nbytes;
+
+	/* position to the start of the directory */
+	itr->next_clust = cluster;
+	itr->last_cluster = 0;
+	if (!fat_next_cluster(itr, &nbytes))
+		return -EIO;
+	itr->dent = (dir_entry *)itr->block;
+	itr->remaining = nbytes / sizeof(dir_entry) - 1;
+	return 0;
+}
+
+/**
+ * fat_find_empty_dentries() - find a sequence of available directory entries
+ *
+ * @itr:	directory iterator
+ * @count:	number of directory entries to find
+ * Return:	0 on success or negative error number
+ */
+static int fat_find_empty_dentries(fat_itr *itr, int count)
+{
+	unsigned cluster;
+	dir_entry *dent;
+	int remaining;
+	unsigned int n = 0;
+	int ret;
+
+	ret = fat_move_to_cluster(itr, itr->start_clust);
+	if (ret)
+		return ret;
+
+	for (;;) {
+		switch (itr->dent->name[0]) {
+		case 0x00:
+			return 0;
+		case DELETED_FLAG:
+			if (!n) {
+				/* Remember first deleted directory entry */
+				cluster = itr->clust;
+				dent = itr->dent;
+				remaining = itr->remaining;
+			}
+			++n;
+			if (n == count) {
+				/* Position back to first directory entry */
+				if (itr->clust != cluster) {
+					ret = fat_move_to_cluster(itr, cluster);
+					if (ret)
+						return ret;
+				}
+				itr->dent = dent;
+				itr->remaining = remaining;
+				return 0;
+			}
+			break;
+		default:
+			n = 0;
+			break;
+		}
+		if (!next_dent(itr))
+			return 0;
+	}
+}
+
 /*
  * Set the file name information from 'name' into 'slotptr',
  */
-- 
2.29.2

