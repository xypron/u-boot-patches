From 622a44ae2eb9f0b46259dacf45eaeb35213fef75 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Fri, 18 Jan 2019 22:28:04 +0100
Subject: [PATCH 1/1] efi_loader: simplify UEFI variable storage

Currently we store UEFI variables as U-Boot environment variables. The
U-Boot variable values contain a type field which is either '(utf)' or
'(boot)'. But actually '(utf)' is never used. So let's eliminate the type
field.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 lib/efi_loader/efi_variable.c | 68 +++++++++++------------------------
 1 file changed, 20 insertions(+), 48 deletions(-)

diff --git a/lib/efi_loader/efi_variable.c b/lib/efi_loader/efi_variable.c
index aff28bf9f0..31d11320ab 100644
--- a/lib/efi_loader/efi_variable.c
+++ b/lib/efi_loader/efi_variable.c
@@ -15,14 +15,14 @@
 /*
  * Mapping between EFI variables and u-boot variables:
  *
- *   efi_$guid_$varname = {attributes}(type)value
+ *   efi_$guid_$varname = {attributes}value
  *
  * For example:
  *
  *   efi_8be4df61-93ca-11d2-aa0d-00e098032b8c_OsIndicationsSupported=
- *      "{ro,boot,run}(blob)0000000000000000"
+ *      "{ro,boot,run}0000000000000000"
  *   efi_8be4df61-93ca-11d2-aa0d-00e098032b8c_BootOrder=
- *      "(blob)00010000"
+ *      "00010000"
  *
  * The attributes are a comma separated list of these possible
  * attributes:
@@ -35,14 +35,6 @@
  * ExitBootServices, and all are persisted (if possible).
  *
  * If not specified, the attributes default to "{boot}".
- *
- * The required type is one of:
- *
- *   + utf8 - raw utf8 string
- *   + blob - arbitrary length hex string
- *
- * Maybe a utf16 type would be useful to for a string value to be auto
- * converted to utf16?
  */
 
 #define PREFIX_LEN (strlen("efi_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_"))
@@ -166,6 +158,7 @@ efi_status_t EFIAPI efi_get_variable(u16 *variable_name,
 	unsigned long in_size;
 	const char *val, *s;
 	u32 attr;
+	size_t len;
 
 	EFI_ENTRY("\"%ls\" %pUl %p %p %p", variable_name, vendor, attributes,
 		  data_size, data);
@@ -184,50 +177,30 @@ efi_status_t EFIAPI efi_get_variable(u16 *variable_name,
 	if (!val)
 		return EFI_EXIT(EFI_NOT_FOUND);
 
-	val = parse_attr(val, &attr);
+	s = parse_attr(val, &attr);
 
 	in_size = *data_size;
 
-	if ((s = prefix(val, "(blob)"))) {
-		size_t len = strlen(s);
-
-		/* number of hexadecimal digits must be even */
-		if (len & 1)
-			return EFI_EXIT(EFI_DEVICE_ERROR);
-
-		/* two characters per byte: */
-		len /= 2;
-		*data_size = len;
-
-		if (in_size < len)
-			return EFI_EXIT(EFI_BUFFER_TOO_SMALL);
+	len = strlen(s);
 
-		if (!data)
-			return EFI_EXIT(EFI_INVALID_PARAMETER);
-
-		if (hex2bin(data, s, len))
-			return EFI_EXIT(EFI_DEVICE_ERROR);
-
-		debug("%s: got value: \"%s\"\n", __func__, s);
-	} else if ((s = prefix(val, "(utf8)"))) {
-		unsigned len = strlen(s) + 1;
-
-		*data_size = len;
+	/* number of hexadecimal digits must be even */
+	if (len & 1)
+		return EFI_EXIT(EFI_DEVICE_ERROR);
 
-		if (in_size < len)
-			return EFI_EXIT(EFI_BUFFER_TOO_SMALL);
+	/* two characters per byte: */
+	len /= 2;
+	*data_size = len;
 
-		if (!data)
-			return EFI_EXIT(EFI_INVALID_PARAMETER);
+	if (in_size < len)
+		return EFI_EXIT(EFI_BUFFER_TOO_SMALL);
 
-		memcpy(data, s, len);
-		((char *)data)[len] = '\0';
+	if (!data)
+		return EFI_EXIT(EFI_INVALID_PARAMETER);
 
-		debug("%s: got value: \"%s\"\n", __func__, (char *)data);
-	} else {
-		debug("%s: invalid value: '%s'\n", __func__, val);
+	if (hex2bin(data, s, len))
 		return EFI_EXIT(EFI_DEVICE_ERROR);
-	}
+
+	debug("%s: got value: \"%s\"\n", __func__, s);
 
 	if (attributes)
 		*attributes = attr & EFI_VARIABLE_MASK;
@@ -315,7 +288,7 @@ efi_status_t EFIAPI efi_set_variable(u16 *variable_name,
 		}
 	}
 
-	val = malloc(2 * data_size + strlen("{ro,run,boot}(blob)") + 1);
+	val = malloc(2 * data_size + strlen("{ro,run,boot}") + 1);
 	if (!val) {
 		ret = EFI_OUT_OF_RESOURCES;
 		goto out;
@@ -344,7 +317,6 @@ efi_status_t EFIAPI efi_set_variable(u16 *variable_name,
 	s += sprintf(s, "}");
 
 	/* store payload: */
-	s += sprintf(s, "(blob)");
 	s = bin2hex(s, data, data_size);
 	*s = '\0';
 
-- 
2.20.1

