From 24768e26bf6891b0702c4e749a953bb7ec5f13c0 Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Wed, 18 Apr 2018 15:40:23 +0200
Subject: [PATCH 1/1] riscv: Add setjmp/longjmp code

To support efi_loader we need to have platform support for setjmp/longjmp.
Add it here.

Signed-off-by: Alexander Graf <agraf@suse.de>
---
 arch/riscv/include/asm/setjmp.h | 24 +++++++++++++++
 arch/riscv/lib/Makefile         |  1 +
 arch/riscv/lib/setjmp.S         | 54 +++++++++++++++++++++++++++++++++
 3 files changed, 79 insertions(+)
 create mode 100644 arch/riscv/include/asm/setjmp.h
 create mode 100644 arch/riscv/lib/setjmp.S

diff --git a/arch/riscv/include/asm/setjmp.h b/arch/riscv/include/asm/setjmp.h
new file mode 100644
index 0000000000..37e8281aaa
--- /dev/null
+++ b/arch/riscv/include/asm/setjmp.h
@@ -0,0 +1,24 @@
+/*
+ * (C) Copyright 2018 Alexander Graf <agraf@suse.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _SETJMP_H_
+#define _SETJMP_H_	1
+
+/*
+ * This really should be opaque, but the EFI implementation wrongly
+ * assumes that a 'struct jmp_buf_data' is defined.
+ */
+struct jmp_buf_data {
+	/* x2, x8, x9, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27 */
+	u64  regs[13];
+};
+
+typedef struct jmp_buf_data jmp_buf[1];
+
+int setjmp(jmp_buf jmp);
+void longjmp(jmp_buf jmp, int ret);
+
+#endif /* _SETJMP_H_ */
diff --git a/arch/riscv/lib/Makefile b/arch/riscv/lib/Makefile
index 323cf3e835..6d97aa2719 100644
--- a/arch/riscv/lib/Makefile
+++ b/arch/riscv/lib/Makefile
@@ -12,3 +12,4 @@ obj-$(CONFIG_CMD_BOOTM) += bootm.o
 obj-$(CONFIG_CMD_GO) += boot.o
 obj-y	+= cache.o
 obj-y	+= interrupts.o
+obj-y   += setjmp.o
diff --git a/arch/riscv/lib/setjmp.S b/arch/riscv/lib/setjmp.S
new file mode 100644
index 0000000000..55c5128163
--- /dev/null
+++ b/arch/riscv/lib/setjmp.S
@@ -0,0 +1,54 @@
+/*
+ * (C) 2018 Alexander Graf <agraf@suse.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <config.h>
+#include <linux/linkage.h>
+
+.pushsection .text.setjmp, "ax"
+ENTRY(setjmp)
+	/* Preserve all callee-saved registers and the SP */
+	sd s0, 0(a0)
+	sd s1, 8(a0)
+	sd s2, 16(a0)
+	sd s3, 24(a0)
+	sd s4, 32(a0)
+	sd s5, 40(a0)
+	sd s6, 48(a0)
+	sd s7, 56(a0)
+	sd s8, 64(a0)
+	sd s9, 72(a0)
+	sd s10, 80(a0)
+	sd s11, 88(a0)
+	li  a0, 0
+	ret
+ENDPROC(setjmp)
+.popsection
+
+.pushsection .text.longjmp, "ax"
+ENTRY(longjmp)
+	ld s0, 0(a0)
+	ld s1, 8(a0)
+	ld s2, 16(a0)
+	ld s3, 24(a0)
+	ld s4, 32(a0)
+	ld s5, 40(a0)
+	ld s6, 48(a0)
+	ld s7, 56(a0)
+	ld s8, 64(a0)
+	ld s9, 72(a0)
+	ld s10, 80(a0)
+	ld s11, 88(a0)
+
+	/* Move the return value in place, but return 1 if passed 0. */
+	beq a1, zero, longjmp_1
+	mv a0, a1
+	ret
+
+	longjmp_1:
+	li a0, 1
+	ret
+ENDPROC(longjmp)
+.popsection
-- 
2.17.0

