From 46244d85a5151774270823438004fe10f26a0808 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 18 Mar 2018 15:58:14 +0100
Subject: [PATCH 1/1] usb: ehci-faraday: remove unused driver

The driver has been introduced in 2013 and has not been used since.
So let's drop it.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 common/usb_hub.c                |   2 -
 drivers/usb/host/Makefile       |   1 -
 drivers/usb/host/ehci-faraday.c | 143 ----------------------------------------
 drivers/usb/host/ehci-hcd.c     |   4 --
 scripts/config_whitelist.txt    |   1 -
 5 files changed, 151 deletions(-)
 delete mode 100644 drivers/usb/host/ehci-faraday.c

diff --git a/common/usb_hub.c b/common/usb_hub.c
index b46dfa16cc..fd7e6cba24 100644
--- a/common/usb_hub.c
+++ b/common/usb_hub.c
@@ -512,7 +512,6 @@ static int usb_scan_port(struct usb_device_scan *usb_scan)
 		 * The following hack causes a ghost device problem
 		 * to Faraday EHCI
 		 */
-#ifndef CONFIG_USB_EHCI_FARADAY
 		/*
 		 * EM interference sometimes causes bad shielded USB
 		 * devices to be shutdown by the hub, this hack enables
@@ -525,7 +524,6 @@ static int usb_scan_port(struct usb_device_scan *usb_scan)
 			      i + 1);
 			usb_hub_port_connect_change(dev, i);
 		}
-#endif
 	}
 
 	if (portstatus & USB_PORT_STAT_SUSPEND) {
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index 7f9ba24cfe..7c9e56dca1 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -26,7 +26,6 @@ obj-$(CONFIG_USB_EHCI_HCD) += ehci-hcd.o
 obj-$(CONFIG_USB_EHCI_ARMADA100) += ehci-armada100.o utmi-armada100.o
 obj-$(CONFIG_USB_EHCI_ATMEL) += ehci-atmel.o
 obj-$(CONFIG_USB_EHCI_FSL) += ehci-fsl.o
-obj-$(CONFIG_USB_EHCI_FARADAY) += ehci-faraday.o
 obj-$(CONFIG_USB_EHCI_GENERIC) += ehci-generic.o
 obj-$(CONFIG_USB_EHCI_EXYNOS) += ehci-exynos.o
 obj-$(CONFIG_USB_EHCI_MXC) += ehci-mxc.o
diff --git a/drivers/usb/host/ehci-faraday.c b/drivers/usb/host/ehci-faraday.c
deleted file mode 100644
index 821222cc5d..0000000000
--- a/drivers/usb/host/ehci-faraday.c
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- * Faraday USB 2.0 EHCI Controller
- *
- * (C) Copyright 2010 Faraday Technology
- * Dante Su <dantesu@faraday-tech.com>
- *
- * SPDX-License-Identifier:	GPL-2.0+
- */
-
-#include <common.h>
-#include <asm/io.h>
-#include <usb.h>
-#include <usb/fusbh200.h>
-#include <usb/fotg210.h>
-
-#include "ehci.h"
-
-#ifndef CONFIG_USB_EHCI_BASE_LIST
-#define CONFIG_USB_EHCI_BASE_LIST	{ CONFIG_USB_EHCI_BASE }
-#endif
-
-union ehci_faraday_regs {
-	struct fusbh200_regs usb;
-	struct fotg210_regs  otg;
-};
-
-static inline int ehci_is_fotg2xx(union ehci_faraday_regs *regs)
-{
-	return !readl(&regs->usb.easstr);
-}
-
-void faraday_ehci_set_usbmode(struct ehci_ctrl *ctrl)
-{
-	/* nothing needs to be done */
-}
-
-int faraday_ehci_get_port_speed(struct ehci_ctrl *ctrl, uint32_t reg)
-{
-	int spd, ret = PORTSC_PSPD_HS;
-	union ehci_faraday_regs *regs;
-
-	ret = (void __iomem *)((ulong)ctrl->hcor - 0x10);
-	if (ehci_is_fotg2xx(regs))
-		spd = OTGCSR_SPD(readl(&regs->otg.otgcsr));
-	else
-		spd = BMCSR_SPD(readl(&regs->usb.bmcsr));
-
-	switch (spd) {
-	case 0:    /* full speed */
-		ret = PORTSC_PSPD_FS;
-		break;
-	case 1:    /* low  speed */
-		ret = PORTSC_PSPD_LS;
-		break;
-	case 2:    /* high speed */
-		ret = PORTSC_PSPD_HS;
-		break;
-	default:
-		printf("ehci-faraday: invalid device speed\n");
-		break;
-	}
-
-	return ret;
-}
-
-uint32_t *faraday_ehci_get_portsc_register(struct ehci_ctrl *ctrl, int port)
-{
-	/* Faraday EHCI has one and only one portsc register */
-	if (port) {
-		/* Printing the message would cause a scan failure! */
-		debug("The request port(%d) is not configured\n", port);
-		return NULL;
-	}
-
-	/* Faraday EHCI PORTSC register offset is 0x20 from hcor */
-	return (uint32_t *)((uint8_t *)ctrl->hcor + 0x20);
-}
-
-static const struct ehci_ops faraday_ehci_ops = {
-	.set_usb_mode		= faraday_ehci_set_usbmode,
-	.get_port_speed		= faraday_ehci_get_port_speed,
-	.get_portsc_register	= faraday_ehci_get_portsc_register,
-};
-
-/*
- * Create the appropriate control structures to manage
- * a new EHCI host controller.
- */
-int ehci_hcd_init(int index, enum usb_init_type init,
-		struct ehci_hccr **ret_hccr, struct ehci_hcor **ret_hcor)
-{
-	struct ehci_hccr *hccr;
-	struct ehci_hcor *hcor;
-	union ehci_faraday_regs *regs;
-	uint32_t base_list[] = CONFIG_USB_EHCI_BASE_LIST;
-
-	if (index < 0 || index >= ARRAY_SIZE(base_list))
-		return -1;
-	ehci_set_controller_priv(index, NULL, &faraday_ehci_ops);
-	regs = (void __iomem *)base_list[index];
-	hccr = (struct ehci_hccr *)&regs->usb.hccr;
-	hcor = (struct ehci_hcor *)&regs->usb.hcor;
-
-	if (ehci_is_fotg2xx(regs)) {
-		/* A-device bus reset */
-		/* ... Power off A-device */
-		setbits_le32(&regs->otg.otgcsr, OTGCSR_A_BUSDROP);
-		/* ... Drop vbus and bus traffic */
-		clrbits_le32(&regs->otg.otgcsr, OTGCSR_A_BUSREQ);
-		mdelay(1);
-		/* ... Power on A-device */
-		clrbits_le32(&regs->otg.otgcsr, OTGCSR_A_BUSDROP);
-		/* ... Drive vbus and bus traffic */
-		setbits_le32(&regs->otg.otgcsr, OTGCSR_A_BUSREQ);
-		mdelay(1);
-		/* Disable OTG & DEV interrupts, triggered at level-high */
-		writel(IMR_IRQLH | IMR_OTG | IMR_DEV, &regs->otg.imr);
-		/* Clear all interrupt status */
-		writel(ISR_HOST | ISR_OTG | ISR_DEV, &regs->otg.isr);
-	} else {
-		/* Interrupt=level-high */
-		setbits_le32(&regs->usb.bmcsr, BMCSR_IRQLH);
-		/* VBUS on */
-		clrbits_le32(&regs->usb.bmcsr, BMCSR_VBUS_OFF);
-		/* Disable all interrupts */
-		writel(0x00, &regs->usb.bmier);
-		writel(0x1f, &regs->usb.bmisr);
-	}
-
-	*ret_hccr = hccr;
-	*ret_hcor = hcor;
-
-	return 0;
-}
-
-/*
- * Destroy the appropriate control structures corresponding
- * the the EHCI host controller.
- */
-int ehci_hcd_stop(int index)
-{
-	return 0;
-}
diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c
index 2582bf36eb..d5a839c1a0 100644
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@ -643,12 +643,10 @@ ehci_submit_async(struct usb_device *dev, unsigned long pipe, void *buffer,
 		dev->act_len = length - QT_TOKEN_GET_TOTALBYTES(token);
 	} else {
 		dev->act_len = 0;
-#ifndef CONFIG_USB_EHCI_FARADAY
 		debug("dev=%u, usbsts=%#x, p[1]=%#x, p[2]=%#x\n",
 		      dev->devnum, ehci_readl(&ctrl->hcor->or_usbsts),
 		      ehci_readl(&ctrl->hcor->or_portsc[0]),
 		      ehci_readl(&ctrl->hcor->or_portsc[1]));
-#endif
 	}
 
 	free(qtd);
@@ -1124,9 +1122,6 @@ int usb_lowlevel_init(int index, enum usb_init_type init, void **controller)
 	if (rc)
 		return rc;
 #endif
-#ifdef CONFIG_USB_EHCI_FARADAY
-	tweaks |= EHCI_TWEAK_NO_INIT_CF;
-#endif
 	rc = ehci_common_init(ctrl, tweaks);
 	if (rc)
 		return rc;
diff --git a/scripts/config_whitelist.txt b/scripts/config_whitelist.txt
index b0958d7a80..40a12785d2 100644
--- a/scripts/config_whitelist.txt
+++ b/scripts/config_whitelist.txt
@@ -4698,7 +4698,6 @@ CONFIG_USB_EHCI_ARMADA100
 CONFIG_USB_EHCI_BASE
 CONFIG_USB_EHCI_BASE_LIST
 CONFIG_USB_EHCI_EXYNOS
-CONFIG_USB_EHCI_FARADAY
 CONFIG_USB_EHCI_KIRKWOOD
 CONFIG_USB_EHCI_MX5
 CONFIG_USB_EHCI_MXC
-- 
2.16.2

