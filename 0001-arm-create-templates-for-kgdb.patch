From cc752573b817d16f2d4630c315f45bdf236dc0d2 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Tue, 17 Apr 2018 19:16:49 +0200
Subject: [PATCH 1/1] arm: create templates for kgdb

Create template files for the kernel debugger implementation.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 arch/arm/include/asm/proc-armv/ptrace.h |   1 +
 arch/arm/lib/Makefile                   |   5 ++
 arch/arm/lib/interrupts.c               |  57 ++++++++++--
 arch/arm/lib/kgdb.c                     | 111 ++++++++++++++++++++++++
 arch/arm/lib/kgdb64.c                   |  54 ++++++++++++
 5 files changed, 221 insertions(+), 7 deletions(-)
 create mode 100644 arch/arm/lib/kgdb.c
 create mode 100644 arch/arm/lib/kgdb64.c

diff --git a/arch/arm/include/asm/proc-armv/ptrace.h b/arch/arm/include/asm/proc-armv/ptrace.h
index 71df5a9e25..2901c59299 100644
--- a/arch/arm/include/asm/proc-armv/ptrace.h
+++ b/arch/arm/include/asm/proc-armv/ptrace.h
@@ -59,6 +59,7 @@ struct pt_regs {
 
 struct pt_regs {
 	long uregs[18];
+	long trap;
 };
 
 #define ARM_cpsr	uregs[16]
diff --git a/arch/arm/lib/Makefile b/arch/arm/lib/Makefile
index 3d3085e917..9ff2fb25ea 100644
--- a/arch/arm/lib/Makefile
+++ b/arch/arm/lib/Makefile
@@ -32,6 +32,11 @@ endif
 
 obj-$(CONFIG_CPU_V7M) += cmd_boot.o
 obj-$(CONFIG_OF_LIBFDT) += bootm-fdt.o
+ifdef CONFIG_ARM64
+obj-$(CONFIG_CMD_KGDB) += kgdb64.o
+else
+obj-$(CONFIG_CMD_KGDB) += kgdb.o
+endif
 obj-$(CONFIG_CMD_BOOTI) += bootm.o image.o
 obj-$(CONFIG_CMD_BOOTM) += bootm.o
 obj-$(CONFIG_CMD_BOOTZ) += bootm.o zimage.o
diff --git a/arch/arm/lib/interrupts.c b/arch/arm/lib/interrupts.c
index 8bec46324d..7084f94504 100644
--- a/arch/arm/lib/interrupts.c
+++ b/arch/arm/lib/interrupts.c
@@ -21,6 +21,7 @@
 
 #include <common.h>
 #include <efi_loader.h>
+#include <kgdb.h>
 #include <asm/proc-armv/ptrace.h>
 #include <asm/u-boot-arm.h>
 #include <efi_loader.h>
@@ -113,8 +114,14 @@ static inline void fixup_pc(struct pt_regs *regs, int offset)
 void do_undefined_instruction (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("undefined instruction\n");
 	fixup_pc(pt_regs, -4);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 1;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("undefined instruction\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -123,8 +130,14 @@ void do_undefined_instruction (struct pt_regs *pt_regs)
 void do_software_interrupt (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("software interrupt\n");
 	fixup_pc(pt_regs, -4);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 2;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("software interrupt\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -133,8 +146,14 @@ void do_software_interrupt (struct pt_regs *pt_regs)
 void do_prefetch_abort (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("prefetch abort\n");
 	fixup_pc(pt_regs, -8);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 3;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("prefetch abort\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -143,8 +162,14 @@ void do_prefetch_abort (struct pt_regs *pt_regs)
 void do_data_abort (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("data abort\n");
 	fixup_pc(pt_regs, -8);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 4;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("data abort\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -153,8 +178,14 @@ void do_data_abort (struct pt_regs *pt_regs)
 void do_not_used (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("not used\n");
 	fixup_pc(pt_regs, -8);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 5;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("not used\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -163,8 +194,14 @@ void do_not_used (struct pt_regs *pt_regs)
 void do_fiq (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("fast interrupt request\n");
 	fixup_pc(pt_regs, -8);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 6;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("fast interrupt request\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
@@ -173,8 +210,14 @@ void do_fiq (struct pt_regs *pt_regs)
 void do_irq (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
-	printf ("interrupt request\n");
 	fixup_pc(pt_regs, -8);
+#if defined(CONFIG_CMD_KGDB)
+	pt_regs->trap = 7;
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
+	printf ("interrupt request\n");
 	show_regs (pt_regs);
 	show_efi_loaded_images(pt_regs);
 	bad_mode ();
diff --git a/arch/arm/lib/kgdb.c b/arch/arm/lib/kgdb.c
new file mode 100644
index 0000000000..05a15a87b3
--- /dev/null
+++ b/arch/arm/lib/kgdb.c
@@ -0,0 +1,111 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Kernel debugger
+ *
+ * Copyright (c) 2018 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ */
+
+#include <common.h>
+#include <kgdb.h>
+#include <asm-generic/signal.h>
+
+/*
+ * Convert interrupt type to exception code for GDB
+ *
+ * @trap:	interrupt type
+ * @return:	exception code for GDB
+ */
+int compute_signal(long trap) {
+	switch (trap)
+	{
+	case 1: /* undefined instruction */
+		return SIGTRAP;
+	case 2: /* software interrupt */
+		return SIGINT;
+	case 3: /* prefetch abort */
+		return SIGBUS;
+	case 4: /* data abort */
+		return SIGBUS;
+	case 5: /* not used */
+		return SIGTRAP;
+	case 6: /* irq */
+		return SIGINT;
+	case 7: /* frq */
+		return SIGINT;
+	default:
+		panic("unknow trap\n");
+	}
+}
+
+void kgdb_flush_cache_range(void *from, void *to)
+{
+}
+
+void kgdb_flush_cache_all(void)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_setjmp(long *buf)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+	return 0;
+}
+
+void kgdb_longjmp(long *buf, int val)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+void kgdb_enter(struct pt_regs *regs, kgdb_data *kdp)
+{
+	disable_interrupts();
+
+	kdp->sigval = compute_signal(regs->trap);
+
+	kdp->nregs = 2;
+
+	kdp->regs[0].num = ARM_PC_REG;
+	kdp->regs[0].val = instruction_pointer(regs);
+
+	kdp->regs[1].num = ARM_SP_REG;
+	kdp->regs[1].val = regs->ARM_sp;
+}
+
+void kgdb_exit(struct pt_regs *regs, kgdb_data *kdp)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_getregs(struct pt_regs *regs, char *buf, int max)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+	return 0;
+}
+
+void kgdb_putreg(struct pt_regs *regs, int regno, char *buf, int length)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+void kgdb_putregs(struct pt_regs *regs, char *buf, int length)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_trap(struct pt_regs *regs)
+{
+	return regs->trap;
+}
+
+/*
+ * This function will generate a breakpoint exception.  It is used at the
+ * beginning of a program to sync up with a debugger and can be used
+ * otherwise as a quick means to stop program execution and "break" into
+ * the debugger.
+ */
+void kgdb_breakpoint(int argc, char * const argv[])
+{
+	asm volatile ("\t.globl breakinst\n\t"
+		      "breakinst: .word 0xe7ffdefe\n\t");
+}
diff --git a/arch/arm/lib/kgdb64.c b/arch/arm/lib/kgdb64.c
new file mode 100644
index 0000000000..f1930980a0
--- /dev/null
+++ b/arch/arm/lib/kgdb64.c
@@ -0,0 +1,54 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Kernel debugger
+ *
+ * Copyright (c) 2018 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ */
+#include <kgdb.h>
+
+void kgdb_flush_cache_range(void *from, void *to)
+{
+}
+
+void kgdb_flush_cache_all(void)
+{
+}
+
+int kgdb_setjmp(long *buf)
+{
+	return 0;
+}
+
+void kgdb_longjmp(long *buf, int val)
+{
+}
+
+void kgdb_enter(struct pt_regs *reqs, kgdb_data *kdp)
+{
+}
+
+void kgdb_exit(struct pt_regs *regs, kgdb_data *kdp)
+{
+}
+
+int kgdb_getregs(struct pt_regs *regs, char *buf, int max)
+{
+	return 0;
+}
+
+void kgdb_putreg(struct pt_regs *regs, int regno, char *buf, int length)
+{
+}
+
+void kgdb_putregs(struct pt_regs *regs, char *buf, int length)
+{
+}
+
+int kgdb_trap(struct pt_regs *regs)
+{
+	return 0;
+}
+
+void kgdb_breakpoint(int argc, char * const argv[])
+{
+}
-- 
2.17.0

