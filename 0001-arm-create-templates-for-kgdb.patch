From 7702945dab121e009d11375e535415443640890c Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Tue, 17 Apr 2018 19:16:49 +0200
Subject: [PATCH 1/1] arm: create templates for kgdb

Create template files for the kernel debugger implementation.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 arch/arm/lib/Makefile     |  5 +++
 arch/arm/lib/interrupts.c |  6 ++++
 arch/arm/lib/kgdb.c       | 72 +++++++++++++++++++++++++++++++++++++++
 arch/arm/lib/kgdb64.c     | 54 +++++++++++++++++++++++++++++
 4 files changed, 137 insertions(+)
 create mode 100644 arch/arm/lib/kgdb.c
 create mode 100644 arch/arm/lib/kgdb64.c

diff --git a/arch/arm/lib/Makefile b/arch/arm/lib/Makefile
index 3d3085e917..9ff2fb25ea 100644
--- a/arch/arm/lib/Makefile
+++ b/arch/arm/lib/Makefile
@@ -32,6 +32,11 @@ endif
 
 obj-$(CONFIG_CPU_V7M) += cmd_boot.o
 obj-$(CONFIG_OF_LIBFDT) += bootm-fdt.o
+ifdef CONFIG_ARM64
+obj-$(CONFIG_CMD_KGDB) += kgdb64.o
+else
+obj-$(CONFIG_CMD_KGDB) += kgdb.o
+endif
 obj-$(CONFIG_CMD_BOOTI) += bootm.o image.o
 obj-$(CONFIG_CMD_BOOTM) += bootm.o
 obj-$(CONFIG_CMD_BOOTZ) += bootm.o zimage.o
diff --git a/arch/arm/lib/interrupts.c b/arch/arm/lib/interrupts.c
index 8bec46324d..ee4879b742 100644
--- a/arch/arm/lib/interrupts.c
+++ b/arch/arm/lib/interrupts.c
@@ -21,6 +21,7 @@
 
 #include <common.h>
 #include <efi_loader.h>
+#include <kgdb.h>
 #include <asm/proc-armv/ptrace.h>
 #include <asm/u-boot-arm.h>
 #include <efi_loader.h>
@@ -113,6 +114,11 @@ static inline void fixup_pc(struct pt_regs *regs, int offset)
 void do_undefined_instruction (struct pt_regs *pt_regs)
 {
 	efi_restore_gd();
+#if defined(CONFIG_CMD_KGDB)
+	if (debugger_exception_handler &&
+	    (*debugger_exception_handler)(pt_regs))
+		return;
+#endif
 	printf ("undefined instruction\n");
 	fixup_pc(pt_regs, -4);
 	show_regs (pt_regs);
diff --git a/arch/arm/lib/kgdb.c b/arch/arm/lib/kgdb.c
new file mode 100644
index 0000000000..d521e4b74f
--- /dev/null
+++ b/arch/arm/lib/kgdb.c
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Kernel debugger
+ *
+ * Copyright (c) 2018 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ */
+
+#include <common.h>
+#include <kgdb.h>
+
+void kgdb_flush_cache_range(void *from, void *to)
+{
+}
+
+void kgdb_flush_cache_all(void)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_setjmp(long *buf)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+	return 0;
+}
+
+void kgdb_longjmp(long *buf, int val)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+void kgdb_enter(struct pt_regs *reqs, kgdb_data *kdp)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+void kgdb_exit(struct pt_regs *regs, kgdb_data *kdp)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_getregs(struct pt_regs *regs, char *buf, int max)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+	return 0;
+}
+
+void kgdb_putreg(struct pt_regs *regs, int regno, char *buf, int length)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+void kgdb_putregs(struct pt_regs *regs, char *buf, int length)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+}
+
+int kgdb_trap(struct pt_regs *regs)
+{
+	printf("%s(%d) %s\n", __FILE__, __LINE__, __func__);
+	return 0;
+}
+
+/*
+ * This function will generate a breakpoint exception.  It is used at the
+ * beginning of a program to sync up with a debugger and can be used
+ * otherwise as a quick means to stop program execution and "break" into
+ * the debugger.
+ */
+void kgdb_breakpoint(int argc, char * const argv[])
+{
+	asm volatile (".word 0xe7ffdefe");
+}
diff --git a/arch/arm/lib/kgdb64.c b/arch/arm/lib/kgdb64.c
new file mode 100644
index 0000000000..f1930980a0
--- /dev/null
+++ b/arch/arm/lib/kgdb64.c
@@ -0,0 +1,54 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Kernel debugger
+ *
+ * Copyright (c) 2018 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ */
+#include <kgdb.h>
+
+void kgdb_flush_cache_range(void *from, void *to)
+{
+}
+
+void kgdb_flush_cache_all(void)
+{
+}
+
+int kgdb_setjmp(long *buf)
+{
+	return 0;
+}
+
+void kgdb_longjmp(long *buf, int val)
+{
+}
+
+void kgdb_enter(struct pt_regs *reqs, kgdb_data *kdp)
+{
+}
+
+void kgdb_exit(struct pt_regs *regs, kgdb_data *kdp)
+{
+}
+
+int kgdb_getregs(struct pt_regs *regs, char *buf, int max)
+{
+	return 0;
+}
+
+void kgdb_putreg(struct pt_regs *regs, int regno, char *buf, int length)
+{
+}
+
+void kgdb_putregs(struct pt_regs *regs, char *buf, int length)
+{
+}
+
+int kgdb_trap(struct pt_regs *regs)
+{
+	return 0;
+}
+
+void kgdb_breakpoint(int argc, char * const argv[])
+{
+}
-- 
2.17.0

