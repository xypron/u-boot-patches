From f6d9d99e1c36a6ff11e6b8d7e6cd664306cfed64 Mon Sep 17 00:00:00 2001
From: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date: Mon, 3 Aug 2020 14:43:39 +0900
Subject: [PATCH 1/1] dfu: rename dfu_tftp_write() to dfu_write_by_name()

This function is essentially independent from tffp, and will also be
utilised in implementing UEFI capsule update in a later commit.
So just give it a more generic name.
In addition, a new configuration option, CONFIG_DFU_ALT, was introduced
so that the file will be compiled with different options, particularly
one added in a later commit.

Signed-off-by: AKASHI Takahiro <takahiro.akashi@linaro.org>
---
 common/update.c        |  5 +--
 drivers/dfu/Kconfig    |  5 +++
 drivers/dfu/Makefile   |  2 +-
 drivers/dfu/dfu_alt.c  | 78 ++++++++++++++++++++++++++++++++++++++++++
 drivers/dfu/dfu_tftp.c | 65 -----------------------------------
 include/dfu.h          | 32 ++++++++---------
 6 files changed, 103 insertions(+), 84 deletions(-)
 create mode 100644 drivers/dfu/dfu_alt.c
 delete mode 100644 drivers/dfu/dfu_tftp.c

diff --git a/common/update.c b/common/update.c
index 5811fac269..756e6365db 100644
--- a/common/update.c
+++ b/common/update.c
@@ -177,8 +177,9 @@ got_update_file:
 		}
 
 		if (fit_image_check_type(fit, noffset, IH_TYPE_FIRMWARE)) {
-			ret = dfu_tftp_write(fit_image_name, update_addr,
-					     update_size, interface, devstring);
+			ret = dfu_write_by_name(fit_image_name, update_addr,
+						update_size, interface,
+						devstring);
 			if (ret)
 				return ret;
 		}
diff --git a/drivers/dfu/Kconfig b/drivers/dfu/Kconfig
index 106f38817a..7d0abe736c 100644
--- a/drivers/dfu/Kconfig
+++ b/drivers/dfu/Kconfig
@@ -10,11 +10,16 @@ config DFU_OVER_USB
 	depends on USB_GADGET
 
 if DFU
+config DFU_ALT
+	bool
+	default n
+
 config DFU_TFTP
 	bool "DFU via TFTP"
 	depends on NET
 	depends on FIT
 	depends on OF_LIBFDT
+	select DFU_ALT
 	help
 	  This option allows updating DFU-managed media using a FIT image
 	  received via TFTP.
diff --git a/drivers/dfu/Makefile b/drivers/dfu/Makefile
index 0d7925c083..cc7de1d3ed 100644
--- a/drivers/dfu/Makefile
+++ b/drivers/dfu/Makefile
@@ -9,5 +9,5 @@ obj-$(CONFIG_$(SPL_)DFU_MTD) += dfu_mtd.o
 obj-$(CONFIG_$(SPL_)DFU_NAND) += dfu_nand.o
 obj-$(CONFIG_$(SPL_)DFU_RAM) += dfu_ram.o
 obj-$(CONFIG_$(SPL_)DFU_SF) += dfu_sf.o
-obj-$(CONFIG_$(SPL_)DFU_TFTP) += dfu_tftp.o
+obj-$(CONFIG_$(SPL_)DFU_ALT) += dfu_alt.o
 obj-$(CONFIG_$(SPL_)DFU_VIRT) += dfu_virt.o
diff --git a/drivers/dfu/dfu_alt.c b/drivers/dfu/dfu_alt.c
new file mode 100644
index 0000000000..5b1b13d717
--- /dev/null
+++ b/drivers/dfu/dfu_alt.c
@@ -0,0 +1,78 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2015
+ * Lukasz Majewski <l.majewski@majess.pl>
+ */
+
+#include <common.h>
+#include <log.h>
+#include <malloc.h>
+#include <errno.h>
+#include <dfu.h>
+
+/**
+ * dfu_write_by_name() - write data to DFU medium
+ * @dfu_entity_name:    Name of DFU entity to write
+ * @addr:               Address of data buffer to write
+ * @len:                Number of bytes
+ * @interface:          Destination DFU medium (e.g. "mmc")
+ * @devstring:          Instance number of destination DFU medium (e.g. "1")
+ *
+ * This function is storing data received on DFU supported medium which
+ * is specified by @dfu_entity_name.
+ *
+ * Return:              0 - on success, error code - otherwise
+ */
+int dfu_write_by_name(char *dfu_entity_name, unsigned int addr,
+		      unsigned int len, char *interface, char *devstring)
+{
+	char *s, *sb;
+	int alt_setting_num, ret;
+	struct dfu_entity *dfu;
+
+	debug("%s: name: %s addr: 0x%x len: %d device: %s:%s\n", __func__,
+	      dfu_entity_name, addr, len, interface, devstring);
+
+	ret = dfu_init_env_entities(interface, devstring);
+	if (ret)
+		goto done;
+
+	/*
+	 * We need to copy name pointed by *dfu_entity_name since this text
+	 * is the integral part of the FDT image.
+	 * Any implicit modification (i.e. done by strsep()) will corrupt
+	 * the FDT image and prevent other images to be stored.
+	 */
+	s = strdup(dfu_entity_name);
+	sb = s;
+	if (!s) {
+		ret = -ENOMEM;
+		goto done;
+	}
+
+	strsep(&s, "@");
+	debug("%s: image name: %s strlen: %zd\n", __func__, sb, strlen(sb));
+
+	alt_setting_num = dfu_get_alt(sb);
+	free(sb);
+	if (alt_setting_num < 0) {
+		pr_err("Alt setting [%d] to write not found!",
+		      alt_setting_num);
+		ret = -ENODEV;
+		goto done;
+	}
+
+	dfu = dfu_get_entity(alt_setting_num);
+	if (!dfu) {
+		pr_err("DFU entity for alt: %d not found!", alt_setting_num);
+		ret = -ENODEV;
+		goto done;
+	}
+
+	ret = dfu_write_from_mem_addr(dfu, (void *)(uintptr_t)addr, len);
+
+done:
+	dfu_free_entities();
+
+	return ret;
+}
diff --git a/drivers/dfu/dfu_tftp.c b/drivers/dfu/dfu_tftp.c
deleted file mode 100644
index ffae4bb54f..0000000000
--- a/drivers/dfu/dfu_tftp.c
+++ /dev/null
@@ -1,65 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * (C) Copyright 2015
- * Lukasz Majewski <l.majewski@majess.pl>
- */
-
-#include <common.h>
-#include <log.h>
-#include <malloc.h>
-#include <errno.h>
-#include <dfu.h>
-
-int dfu_tftp_write(char *dfu_entity_name, unsigned int addr, unsigned int len,
-		   char *interface, char *devstring)
-{
-	char *s, *sb;
-	int alt_setting_num, ret;
-	struct dfu_entity *dfu;
-
-	debug("%s: name: %s addr: 0x%x len: %d device: %s:%s\n", __func__,
-	      dfu_entity_name, addr, len, interface, devstring);
-
-	ret = dfu_init_env_entities(interface, devstring);
-	if (ret)
-		goto done;
-
-	/*
-	 * We need to copy name pointed by *dfu_entity_name since this text
-	 * is the integral part of the FDT image.
-	 * Any implicit modification (i.e. done by strsep()) will corrupt
-	 * the FDT image and prevent other images to be stored.
-	 */
-	s = strdup(dfu_entity_name);
-	sb = s;
-	if (!s) {
-		ret = -ENOMEM;
-		goto done;
-	}
-
-	strsep(&s, "@");
-	debug("%s: image name: %s strlen: %zd\n", __func__, sb, strlen(sb));
-
-	alt_setting_num = dfu_get_alt(sb);
-	free(sb);
-	if (alt_setting_num < 0) {
-		pr_err("Alt setting [%d] to write not found!",
-		      alt_setting_num);
-		ret = -ENODEV;
-		goto done;
-	}
-
-	dfu = dfu_get_entity(alt_setting_num);
-	if (!dfu) {
-		pr_err("DFU entity for alt: %d not found!", alt_setting_num);
-		ret = -ENODEV;
-		goto done;
-	}
-
-	ret = dfu_write_from_mem_addr(dfu, (void *)(uintptr_t)addr, len);
-
-done:
-	dfu_free_entities();
-
-	return ret;
-}
diff --git a/include/dfu.h b/include/dfu.h
index 84abdc79ac..cecfbd7659 100644
--- a/include/dfu.h
+++ b/include/dfu.h
@@ -494,27 +494,27 @@ static inline int dfu_fill_entity_virt(struct dfu_entity *dfu, char *devstr,
 #endif
 
 /**
- * dfu_tftp_write() - write TFTP data to DFU medium
+ * dfu_write_by_name() - write data to DFU medium
+ * @dfu_entity_name:	Name of DFU entity to write
+ * @addr:		Address of data buffer to write
+ * @len:		Number of bytes
+ * @interface:		Destination DFU medium (e.g. "mmc")
+ * @devstring:		Instance number of destination DFU medium (e.g. "1")
  *
- * This function is storing data received via TFTP on DFU supported medium.
+ * This function is storing data received on DFU supported medium which
+ * is specified by @dfu_entity_name.
  *
- * @dfu_entity_name:	name of DFU entity to write
- * @addr:		address of data buffer to write
- * @len:		number of bytes
- * @interface:		destination DFU medium (e.g. "mmc")
- * @devstring:		instance number of destination DFU medium (e.g. "1")
- *
- * Return:		0 on success, otherwise error code
+ * Return:		0 - on success, error code - otherwise
  */
-#if CONFIG_IS_ENABLED(DFU_TFTP)
-int dfu_tftp_write(char *dfu_entity_name, unsigned int addr, unsigned int len,
-		   char *interface, char *devstring);
+#if CONFIG_IS_ENABLED(DFU_ALT)
+int dfu_write_by_name(char *dfu_entity_name, unsigned int addr,
+		      unsigned int len, char *interface, char *devstring);
 #else
-static inline int dfu_tftp_write(char *dfu_entity_name, unsigned int addr,
-				 unsigned int len, char *interface,
-				 char *devstring)
+static inline int dfu_write_by_name(char *dfu_entity_name, unsigned int addr,
+				    unsigned int len, char *interface,
+				    char *devstring)
 {
-	puts("TFTP write support for DFU not available!\n");
+	puts("write support for DFU not available!\n");
 	return -ENOSYS;
 }
 #endif
-- 
2.28.0

