From e30709b3f4aa8526262da7bbf58e5578670d1e23 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 22 Nov 2020 11:54:22 +0100
Subject: [PATCH 1/1] fs: fat: reuse deleted directory entries

When creating new directory entries try to reuse entries marked as deleted.

In fill_dir_slot() do not allocate new clusters as this has already been
done in fat_find_empty_dentries().

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 fs/fat/fat_write.c | 34 +++++++++++++++++++++++-----------
 1 file changed, 23 insertions(+), 11 deletions(-)

diff --git a/fs/fat/fat_write.c b/fs/fat/fat_write.c
index 1efecfa5b2..2c6e0b24ee 100644
--- a/fs/fat/fat_write.c
+++ b/fs/fat/fat_write.c
@@ -258,7 +258,7 @@ static int flush_dirty_fat_buffer(fsdata *mydata)
  * @count:	number of directory entries to find
  * Return:	0 on success or negative error number
  */
-static int __maybe_unused fat_find_empty_dentries(fat_itr *itr, int count)
+static int fat_find_empty_dentries(fat_itr *itr, int count)
 {
 	unsigned int cluster;
 	dir_entry *dent;
@@ -417,11 +417,11 @@ fill_dir_slot(fat_itr *itr, const char *l_name, const char *shortname)
 		if (itr->remaining == 0)
 			flush_dir(itr);
 
-		/* allocate a cluster for more entries */
-		if (!next_dent(itr) && !itr->dent)
-			if ((itr->is_root && itr->fsdata->fatsize != 32) ||
-			    new_dir_table(itr))
+		if (counter) {
+			next_dent(itr);
+			if (!itr->dent)
 				return -EIO;
+		}
 	}
 
 	return 0;
@@ -1335,6 +1335,7 @@ int file_fat_write_at(const char *filename, loff_t pos, void *buffer,
 	} else {
 		/* Create a new file */
 		char shortname[SHORT_NAME_SIZE];
+		int ndent;
 
 		if (itr->is_root) {
 			/* root dir cannot have "." or ".." */
@@ -1358,10 +1359,15 @@ int file_fat_write_at(const char *filename, loff_t pos, void *buffer,
 		}
 
 		/* Check if long name is needed */
-		ret = set_name(itr, filename, shortname);
-		if (ret < 0)
+		ndent = set_name(itr, filename, shortname);
+		if (ndent < 0) {
+			ret = ndent;
+			goto exit;
+		}
+		ret = fat_find_empty_dentries(itr, ndent);
+		if (ret)
 			goto exit;
-		if (ret > 1) {
+		if (ndent > 1) {
 			/* Set long name entries */
 			ret = fill_dir_slot(itr, filename, shortname);
 			if (ret)
@@ -1603,6 +1609,7 @@ int fat_mkdir(const char *new_dirname)
 		goto exit;
 	} else {
 		char shortname[SHORT_NAME_SIZE];
+		int ndent;
 
 		if (itr->is_root) {
 			/* root dir cannot have "." or ".." */
@@ -1620,10 +1627,15 @@ int fat_mkdir(const char *new_dirname)
 		}
 
 		/* Check if long name is needed */
-		ret = set_name(itr, dirname, shortname);
-		if (ret < 0)
+		ndent = set_name(itr, dirname, shortname);
+		if (ndent < 0) {
+			ret = ndent;
+			goto exit;
+		}
+		ret = fat_find_empty_dentries(itr, ndent);
+		if (ret)
 			goto exit;
-		if (ret > 1) {
+		if (ndent > 1) {
 			/* Set long name entries */
 			ret = fill_dir_slot(itr, dirname, shortname);
 			if (ret)
-- 
2.29.2

