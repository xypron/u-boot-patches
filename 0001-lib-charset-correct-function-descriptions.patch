From c5004d6de94371707d78d95ff780ba6771681f8e Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 9 May 2020 08:57:42 +0200
Subject: [PATCH 1/1] lib: charset: correct function descriptions

Change function descriptions to match kernel doc style.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/charset.h | 39 +++++++++++++++++++++++++--------------
 1 file changed, 25 insertions(+), 14 deletions(-)

diff --git a/include/charset.h b/include/charset.h
index 30faa72285..c5e0add681 100644
--- a/include/charset.h
+++ b/include/charset.h
@@ -55,7 +55,7 @@ size_t utf8_utf16_strnlen(const char *src, size_t count);
 /**
  * utf8_utf16_strlen() - length of a utf-8 string after conversion to utf-16
  *
- * @src:		utf-8 string
+ * @a:			utf-8 string
  * Return:		length in u16 after conversion to utf-16 without the
  *			trailing \0. If an invalid UTF-8 sequence is hit one
  *			u16 will be reserved for a replacement character.
@@ -75,8 +75,8 @@ int utf8_utf16_strncpy(u16 **dst, const char *src, size_t count);
 /**
  * utf8_utf16_strcpy() - copy utf-8 string to utf-16 string
  *
- * @dst:		destination buffer
- * @src:		source buffer
+ * @d:			destination buffer
+ * @s:			source buffer
  * Return:		-1 if the input parameters are invalid
  */
 #define utf8_utf16_strcpy(d, s) utf8_utf16_strncpy((d), (s), SIZE_MAX)
@@ -126,7 +126,7 @@ size_t utf16_utf8_strnlen(const u16 *src, size_t count);
 /**
  * utf16_utf8_strlen() - length of a utf-16 string after conversion to utf-8
  *
- * @src:		utf-16 string
+ * @a:			utf-16 string
  * Return:		length in bytes after conversion to utf-8 without the
  *			trailing \0. If an invalid UTF-16 sequence is hit one
  *			byte will be reserved for a replacement character.
@@ -146,8 +146,8 @@ int utf16_utf8_strncpy(char **dst, const u16 *src, size_t count);
 /**
  * utf16_utf8_strcpy() - copy utf-16 string to utf-8 string
  *
- * @dst:		destination buffer
- * @src:		source buffer
+ * @d:			destination buffer
+ * @s:			source buffer
  * Return:		-1 if the input parameters are invalid
  */
 #define utf16_utf8_strcpy(d, s) utf16_utf8_strncpy((d), (s), SIZE_MAX)
@@ -168,7 +168,7 @@ s32 utf_to_lower(const s32 code);
  */
 s32 utf_to_upper(const s32 code);
 
-/*
+/**
  * u16_strncmp() - compare two u16 string
  *
  * @s1:		first string to compare
@@ -181,6 +181,18 @@ s32 utf_to_upper(const s32 code);
  *		corresponding u16 in s2
  */
 int u16_strncmp(const u16 *s1, const u16 *s2, size_t n);
+
+/**
+ * u16_strcmp() - compare two u16 string
+ *
+ * @s1:		first string to compare
+ * @s2:		second string to compare
+ * Return:	0  if the first n u16 are the same in s1 and s2
+ *		< 0 if the first different u16 in s1 is less than the
+ *		corresponding u16 in s2
+ *		> 0 if the first different u16 in s1 is greater than the
+ *		corresponding u16 in s2
+ */
 #define u16_strcmp(s1, s2)	u16_strncmp((s1), (s2), SIZE_MAX)
 
 /**
@@ -190,7 +202,7 @@ int u16_strncmp(const u16 *s1, const u16 *s2, size_t n);
  * In the EFI context we explicitly need a function handling u16 strings.
  *
  * @in:			null terminated u16 string
- * ReturnValue:		number of non-zero words.
+ * Return:		number of non-zero words.
  *			This is not the number of utf-16 letters!
  */
 size_t u16_strlen(const void *in);
@@ -202,7 +214,6 @@ size_t u16_strlen(const void *in);
  *
  * @in:			null terminated u16 string
  * Return:		bytes in a u16 string
- *
  */
 size_t u16_strsize(const void *in);
 
@@ -214,7 +225,7 @@ size_t u16_strsize(const void *in);
  *
  * @in:			null terminated u16 string
  * @count:		maximum number of words to count
- * ReturnValue:		number of non-zero words.
+ * Return:		number of non-zero words.
  *			This is not the number of utf-16 letters!
  */
 size_t u16_strnlen(const u16 *in, size_t count);
@@ -251,10 +262,10 @@ u16 *u16_strdup(const void *src);
  * NOTE that a single utf16 character can generate up to 3 utf8
  * characters.  See MAX_UTF8_PER_UTF16.
  *
- * @dest   the destination buffer to write the utf8 characters
- * @src    the source utf16 string
- * @size   the number of utf16 characters to convert
- * @return the pointer to the first unwritten byte in 'dest'
+ * @dest:	the destination buffer to write the utf8 characters
+ * @src:	the source utf16 string
+ * @size:	the number of utf16 characters to convert
+ * Return:	the pointer to the first unwritten byte in 'dest'
  */
 uint8_t *utf16_to_utf8(uint8_t *dest, const uint16_t *src, size_t size);
 
-- 
2.26.2

