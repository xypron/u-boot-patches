From ba4762f440501041419021c8bc2f0e4aeff792af Mon Sep 17 00:00:00 2001
From: AKASHI Takahiro <takahiro.akashi@linaro.org>
Date: Wed, 16 May 2018 13:24:25 +0900
Subject: [PATCH 1/1] efi_loader: add dummy efi tables for booting Shell.efi
 successfully

Original patch by AKASHI Takahiro <takahiro.akashi@linaro.org>.

Changes:
%s/DXE_TABLE_GUID/DXE_SERVICES_TABLE_GUID/g
%s/HOB_LIST_GUID/EFI_HOB_LIST_GUID/g

TODO:
The DXE table is a structure of type DXE_SERVICES (alias EFI_DXE_SERVICES)
as defined in MdePkg/Include/Pi/PiDxeCis.h. To avoid errors we need  at
least implement function stubs returning EFI_UNSUPPORTED for each of the
pointers.

TODO:
We should at least add an EFI_HOB_TYPE_END_OF_HOB_LIST entry
to the table. MdePkg/Include/Pi/PiHob.h contains the necessary definitions.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 cmd/bootefi.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/cmd/bootefi.c b/cmd/bootefi.c
index a0a8a7cdac..ac4deac22d 100644
--- a/cmd/bootefi.c
+++ b/cmd/bootefi.c
@@ -35,6 +35,14 @@ static efi_status_t efi_obj_list_initialized = OBJ_LIST_NOT_INITIALIZED;
 static struct efi_device_path *bootefi_image_path;
 static struct efi_device_path *bootefi_device_path;
 
+#define DXE_SERVICES_TABLE_GUID \
+	((efi_guid_t)EFI_GUID(0x05AD34BA, 0x6F02, 0x4214, \
+		0x95, 0x2E, 0x4D, 0xA0, 0x39, 0x8E, 0x2B, 0xB9))
+
+#define EFI_HOB_LIST_GUID \
+	((efi_guid_t)EFI_GUID(0x7739F24C, 0x93D7, 0x11D4, \
+		0x9A, 0x3A, 0x00, 0x90, 0x27, 0x3F, 0xC1, 0x4D))
+
 /* Initialize and populate EFI object list */
 efi_status_t efi_init_obj_list(void)
 {
@@ -86,6 +94,25 @@ efi_status_t efi_init_obj_list(void)
 	if (ret != EFI_SUCCESS)
 		goto out;
 
+{
+	efi_guid_t guid = DXE_SERVICES_TABLE_GUID;
+	/* Map within the low 32 bits, to allow for 32bit SMBIOS tables */
+	u64 table = U32_MAX;
+	efi_status_t ret;
+
+	/* Reserve 4kiB page for SMBIOS */
+	ret = efi_allocate_pages(EFI_ALLOCATE_MAX_ADDRESS,
+				EFI_RUNTIME_SERVICES_DATA, 1, &table);
+	if (ret != EFI_SUCCESS)
+		return ret;
+
+	/* And expose them to our EFI payload */
+	ret = efi_install_configuration_table(&guid, (void *)(uintptr_t)table);
+
+	guid = EFI_HOB_LIST_GUID;
+	ret = efi_install_configuration_table(&guid, (void *)(uintptr_t)table);
+}
+
 	/* Initialize EFI runtime services */
 	ret = efi_reset_system_init();
 	if (ret != EFI_SUCCESS)
-- 
2.18.0

