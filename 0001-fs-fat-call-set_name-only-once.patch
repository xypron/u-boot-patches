From b1d90dcbe1f4aa04065f986743eff4b3bc0c23e0 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 21 Nov 2020 08:32:50 +0100
Subject: [PATCH 1/1] fs: fat: call set_name() only once

In set_name() we select the short name. Once this is correctly implemented
this will be a performance intensive operation because we need to check
that the name does not exist yet. So set_name should only be called once.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 fs/fat/fat_write.c | 41 +++++++++++++++++++++++++++++++----------
 1 file changed, 31 insertions(+), 10 deletions(-)

diff --git a/fs/fat/fat_write.c b/fs/fat/fat_write.c
index c0ddfd6a29..af86c1f41a 100644
--- a/fs/fat/fat_write.c
+++ b/fs/fat/fat_write.c
@@ -22,6 +22,9 @@
 /* Characters that may only be used in long file names */
 static const char LONG_ONLY_CHARS[] = "+,;=[]";
 
+/* Combined size of the name and ext fields in the directory entry */
+#define SHORT_NAME_SIZE 11
+
 /**
  * str2fat() - convert string to valid FAT name characters
  *
@@ -69,15 +72,17 @@ static int str2fat(char *dest, char *src, int length)
  *
  * @dirent:	directory entry
  * @filename:	long file name
+ * @shortname:	buffer of 11 bytes to receive chosen short name and extension
  * Return:	number of directory entries needed, negative on error
  */
-static int set_name(dir_entry *dirent, const char *filename)
+static int set_name(dir_entry *dirent, const char *filename, char *shortname)
 {
 	char *period;
 	char *pos;
 	int period_location;
 	char buf[13];
 	int i;
+	int ret;
 
 	if (!filename)
 		return -EIO;
@@ -106,8 +111,10 @@ static int set_name(dir_entry *dirent, const char *filename)
 
 	/* If filename and short name are the same, quit. */
 	sprintf(buf, "%.*s.%.3s", period_location, dirent->name, dirent->ext);
-	if (!strcmp(buf, filename))
-		return 1;
+	if (!strcmp(buf, filename)) {
+		ret = 1;
+		goto out;
+	}
 
 	/* Construct an indexed short name */
 	for (i = 1; i < 10000000; ++i) {
@@ -127,8 +134,12 @@ static int set_name(dir_entry *dirent, const char *filename)
 
 		/* Each long name directory entry takes 13 characters. */
 		return (strlen(filename) + 25) / 13;
+		goto out;
 	}
 	return -EIO;
+out:
+	memcpy(shortname, dirent->name, SHORT_NAME_SIZE);
+	return ret;
 }
 
 static int total_sector;
@@ -1002,18 +1013,25 @@ getit:
 	return 0;
 }
 
-/*
- * Fill dir_entry
+/**
+ * fill_dentry() - fill directory entry with shortname
+ *
+ * @mydata:		private filesystem parameters
+ * @dentptr:		directory entry
+ * @shortname:		chosen short name
+ * @start_cluster:	first cluster of file
+ * @size:		file size
+ * @attr:		file attributes
  */
 static void fill_dentry(fsdata *mydata, dir_entry *dentptr,
-	const char *filename, __u32 start_cluster, __u32 size, __u8 attr)
+	const char *shortname, __u32 start_cluster, __u32 size, __u8 attr)
 {
 	set_start_cluster(mydata, dentptr, start_cluster);
 	dentptr->size = cpu_to_le32(size);
 
 	dentptr->attr = attr;
 
-	set_name(dentptr, filename);
+	memcpy(dentptr->name, shortname, SHORT_NAME_SIZE);
 }
 
 /*
@@ -1198,6 +1216,7 @@ int file_fat_write_at(const char *filename, loff_t pos, void *buffer,
 		retdent->size = cpu_to_le32(pos + size);
 	} else {
 		/* Create a new file */
+		char shortname[SHORT_NAME_SIZE];
 
 		if (itr->is_root) {
 			/* root dir cannot have "." or ".." */
@@ -1223,7 +1242,7 @@ int file_fat_write_at(const char *filename, loff_t pos, void *buffer,
 		memset(itr->dent, 0, sizeof(*itr->dent));
 
 		/* Check if long name is needed */
-		ret = set_name(itr->dent, filename);
+		ret = set_name(itr->dent, filename, shortname);
 		if (ret < 0)
 			goto exit;
 		if (ret > 1) {
@@ -1467,6 +1486,8 @@ int fat_mkdir(const char *new_dirname)
 		ret = -EEXIST;
 		goto exit;
 	} else {
+		char shortname[SHORT_NAME_SIZE];
+
 		if (itr->is_root) {
 			/* root dir cannot have "." or ".." */
 			if (!strcmp(l_dirname, ".") ||
@@ -1485,7 +1506,7 @@ int fat_mkdir(const char *new_dirname)
 		memset(itr->dent, 0, sizeof(*itr->dent));
 
 		/* Check if long name is needed */
-		ret = set_name(itr->dent, dirname);
+		ret = set_name(itr->dent, dirname, shortname);
 		if (ret < 0)
 			goto exit;
 		if (ret > 1) {
@@ -1496,7 +1517,7 @@ int fat_mkdir(const char *new_dirname)
 		}
 
 		/* Set attribute as archive for regular file */
-		fill_dentry(itr->fsdata, itr->dent, dirname, 0, 0,
+		fill_dentry(itr->fsdata, itr->dent, shortname, 0, 0,
 			    ATTR_DIR | ATTR_ARCH);
 
 		retdent = itr->dent;
-- 
2.29.2

