From b0c4f23558aaa61e49fcd88f87dec5e6dbb56f98 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 15 May 2021 17:29:20 +0200
Subject: [PATCH 1/1] cmd: add attrib command

The attrib command can display the attributes of a file. Currently only FAT
is supported.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 cmd/Kconfig  |  7 +++++++
 cmd/fs.c     | 10 ++++++++++
 fs/fs.c      | 29 +++++++++++++++++++++++++++++
 include/fs.h |  1 +
 4 files changed, 47 insertions(+)

diff --git a/cmd/Kconfig b/cmd/Kconfig
index f962bb7141..c55f5b379b 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -2101,6 +2101,13 @@ config CMD_CROS_EC
 endmenu
 
 menu "Filesystem commands"
+
+config CMD_ATTRIB
+	bool "Enable the 'attrib' command"
+	depends on CMD_FS_GENERIC
+	help
+	  This enables the 'attrib' command to display file attributes.
+
 config CMD_BTRFS
 	bool "Enable the 'btrsubvol' command"
 	select FS_BTRFS
diff --git a/cmd/fs.c b/cmd/fs.c
index 5ad11647c2..a412ae5c4e 100644
--- a/cmd/fs.c
+++ b/cmd/fs.c
@@ -9,6 +9,16 @@
 #include <command.h>
 #include <fs.h>
 
+#ifdef CONFIG_CMD_ATTRIB
+U_BOOT_CMD(
+	attrib,	4,	4,	do_attrib,
+	"determine a file's attributes",
+	"<interface> <dev[:part]> <filename>\n"
+	"    - Find file 'filename' from 'dev' on 'interface'\n"
+	"      and determine its attributes."
+);
+#endif
+
 static int do_size_wrapper(struct cmd_tbl *cmdtp, int flag, int argc,
 			   char *const argv[])
 {
diff --git a/fs/fs.c b/fs/fs.c
index b274e1cc3e..b2b124935e 100644
--- a/fs/fs.c
+++ b/fs/fs.c
@@ -496,6 +496,35 @@ int fs_attr(const char *filename, struct fs_file_attributes *attrib)
 
 	return ret;
 }
+
+int do_attrib(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	struct fs_file_attributes attr;
+	struct rtc_time *tm;
+
+	if (argc != 4)
+		return CMD_RET_USAGE;
+
+	if (fs_set_blk_dev(argv[1], argv[2], FS_TYPE_ANY))
+		return 1;
+
+	if (fs_attr(argv[3], &attr) < 0)
+		return CMD_RET_FAILURE;
+
+	printf("%s %c%c%c%c%c ", argv[3],
+	       attr.flags & FS_ATTR_READ_ONLY ? 'R' : '.',
+	       attr.flags & FS_ATTR_HIDDEN ?	'H' : '.',
+	       attr.flags & FS_ATTR_SYSTEM ?	'S' : '.',
+	       attr.flags & FS_ATTR_DIR ?	'D' : '.',
+	       attr.flags & FS_ATTR_ARCH ?	'A' : '.');
+	tm = &attr.change_time;
+	printf("%04d-%02d-%02d %02d:%02d:%02d ",
+	       tm->tm_year, tm->tm_mon, tm->tm_mday,
+	       tm->tm_hour, tm->tm_min, tm->tm_sec);
+	printf("%llu\n", (unsigned long long)attr.size);
+
+	return 0;
+}
 #endif
 
 int fs_size(const char *filename, loff_t *size)
diff --git a/include/fs.h b/include/fs.h
index 6396a19eb5..d50869e50e 100644
--- a/include/fs.h
+++ b/include/fs.h
@@ -282,6 +282,7 @@ int fs_mkdir(const char *filename);
  * Common implementation for various filesystem commands, optionally limited
  * to a specific filesystem type via the fstype parameter.
  */
+int do_attrib(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[]);
 int do_size(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[],
 	    int fstype);
 int do_load(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[],
-- 
2.30.2

