From 81e07583a5fa35a9a6c9b6119988561759f4da10 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Tue, 18 Sep 2018 18:48:18 +0200
Subject: [PATCH 1/1] efi_driver: convert function descriptions to Sphinx style

Convert the function descriptions to Sphinx style.
efi_driver_init() is cCalled by efi_init_obj_list().

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 lib/efi_driver/efi_uclass.c | 86 +++++++++++++++++++++++--------------
 1 file changed, 54 insertions(+), 32 deletions(-)

diff --git a/lib/efi_driver/efi_uclass.c b/lib/efi_driver/efi_uclass.c
index b484aba072..bb86ffd399 100644
--- a/lib/efi_driver/efi_uclass.c
+++ b/lib/efi_driver/efi_uclass.c
@@ -19,11 +19,13 @@
 
 #include <efi_driver.h>
 
-/*
- * Check node type. We do not support partitions as controller handles.
+/**
+ * check_node_type() - check node type
+ *
+ * We do not support partitions as controller handles.
  *
- * @handle	handle to be checked
- * @return	status code
+ * @handle:	handle to be checked
+ * Return:	status code
  */
 static efi_status_t check_node_type(efi_handle_t handle)
 {
@@ -44,13 +46,13 @@ static efi_status_t check_node_type(efi_handle_t handle)
 	return ret;
 }
 
-/*
- * Check if the driver supports the controller.
+/**
+ * efi_uc_supported() - check if the driver supports the controller
  *
- * @this			driver binding protocol
- * @controller_handle		handle of the controller
- * @remaining_device_path	path specifying the child controller
- * @return			status code
+ * @this:			driver binding protocol
+ * @controller_handle:		handle of the controller
+ * @remaining_device_path:	path specifying the child controller
+ * Return:			status code
  */
 static efi_status_t EFIAPI efi_uc_supported(
 		struct efi_driver_binding_protocol *this,
@@ -92,13 +94,13 @@ out:
 	return EFI_EXIT(ret);
 }
 
-/*
- * Create child controllers and attach driver.
+/**
+ * efi_uc_start() - create child controllers and attach driver
  *
- * @this			driver binding protocol
- * @controller_handle		handle of the controller
- * @remaining_device_path	path specifying the child controller
- * @return			status code
+ * @this:			driver binding protocol
+ * @controller_handle:		handle of the controller
+ * @remaining_device_path:	path specifying the child controller
+ * Return:			status code
  */
 static efi_status_t EFIAPI efi_uc_start(
 		struct efi_driver_binding_protocol *this,
@@ -146,12 +148,13 @@ out:
 	return EFI_EXIT(ret);
 }
 
-/*
- * Remove a single child controller from the parent controller.
+/**
+ * disconnect_child() - remove a single child controller from the parent
+ *			controller
  *
- * @controller_handle	parent controller
- * @child_handle	child controller
- * @return		status code
+ * @controller_handle:	parent controller
+ * @child_handle:	child controller
+ * Return:		status code
  */
 static efi_status_t disconnect_child(efi_handle_t controller_handle,
 				     efi_handle_t child_handle)
@@ -176,14 +179,14 @@ static efi_status_t disconnect_child(efi_handle_t controller_handle,
 	return ret;
 }
 
-/*
- * Remove child controllers and disconnect the controller.
+/**
+ * efi_uc_stop() - Remove child controllers and disconnect the controller
  *
- * @this			driver binding protocol
- * @controller_handle		handle of the controller
- * @number_of_children		number of child controllers to remove
- * @child_handle_buffer		handles of the child controllers to remove
- * @return			status code
+ * @this:			driver binding protocol
+ * @controller_handle:		handle of the controller
+ * @number_of_children:		number of child controllers to remove
+ * @child_handle_buffer:	handles of the child controllers to remove
+ * Return:			status code
  */
 static efi_status_t EFIAPI efi_uc_stop(
 		struct efi_driver_binding_protocol *this,
@@ -241,6 +244,12 @@ out:
 	return EFI_EXIT(ret);
 }
 
+/**
+ * efi_add_driver() - add driver
+ *
+ * @drv:		driver to add
+ * Return:		status code
+ */
 static efi_status_t efi_add_driver(struct driver *drv)
 {
 	efi_status_t ret;
@@ -280,11 +289,12 @@ out:
 	return ret;
 }
 
-/*
- * Initialize the EFI drivers.
- * Called by board_init_r().
+/**
+ * efi_driver_init() - initialize the EFI drivers
  *
- * @return	0 = success, any other value will stop further execution
+ * Called by efi_init_obj_list().
+ *
+ * Return:	0 = success, any other value will stop further execution
  */
 efi_status_t efi_driver_init(void)
 {
@@ -309,12 +319,24 @@ efi_status_t efi_driver_init(void)
 	return ret;
 }
 
+/**
+ * efi_uc_init() - initialize the EFI uclass
+ *
+ * @class:	the EFI uclass
+ * Return:	0 = success
+ */
 static int efi_uc_init(struct uclass *class)
 {
 	printf("EFI: Initializing UCLASS_EFI\n");
 	return 0;
 }
 
+/**
+ * efi_uc_destroy() - destroy the EFI uclass
+ *
+ * @class:	the EFI uclass
+ * Return:	0 = success
+ */
 static int efi_uc_destroy(struct uclass *class)
 {
 	printf("Destroying  UCLASS_EFI\n");
-- 
2.18.0

