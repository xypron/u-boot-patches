From 16082f4abc9e27aa0edf11ac8501d821800ee45a Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Thu, 26 Mar 2020 20:53:08 +0000
Subject: [PATCH 1/1] efi_loader: transfer UEFI variables via memory

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/efi_variable.h              |  5 ++++-
 lib/efi_loader/Kconfig              | 18 ++++++++++++++++++
 lib/efi_loader/efi_variable.c       | 20 +++++++++++++++++---
 lib/efi_loader/efi_variables_file.c | 12 ++++++++----
 lib/efi_loader/efi_variables_mem.c  | 24 ++++++++++++++++++++++--
 5 files changed, 69 insertions(+), 10 deletions(-)

diff --git a/include/efi_variable.h b/include/efi_variable.h
index 037d268085..83595dea2e 100644
--- a/include/efi_variable.h
+++ b/include/efi_variable.h
@@ -14,6 +14,9 @@
 
 #define EFI_VAR_FILE_MAGIC 0x7261566966456255 /* UbEfiVar */
 
+/* Variables are available in memory */
+#define EFI_VAR_IN_MEMORY (1UL << (EFI_BITS_PER_LONG - 2))
+
 struct efi_var_entry {
 	u32 length;
 	u32 attr;
@@ -31,7 +34,7 @@ struct efi_var_file {
 
 efi_status_t efi_var_to_file(void);
 
-efi_status_t efi_var_from_file(void);
+efi_status_t efi_var_from_file(u32 exclude);
 
 void efi_var_mem_memcpy(void *dest, const void *src, size_t n);
 
diff --git a/lib/efi_loader/Kconfig b/lib/efi_loader/Kconfig
index 41705fc252..5489e19de3 100644
--- a/lib/efi_loader/Kconfig
+++ b/lib/efi_loader/Kconfig
@@ -35,6 +35,24 @@ config EFI_VARIABLE_FILE_STORE
 	  Select tis option if you want non-volatile UEFI variables to be stored
 	  as file /ubootefi.var on the EFI system partition.
 
+config EFI_VARIABLE_MEM_STORE
+	bool "Pass UEFI runtime variables in memory"
+	help
+	  The operating system can edit non-volatile runtime variables. Let
+	  U-Boot store UEFI variables at a fixed memory address. Try to
+	  recover their value from the fixed memory address after a reboot.
+
+if EFI_VARIABLE_MEM_STORE
+
+config EFI_VAR_MEM_ADDR
+	hex "Address for UEFI variables"
+	default 0xFFE0000
+	help
+	  U-Boot will use this address to store UEFI variables. The value
+	  should be a multiple of 0x10000.
+
+endif
+
 config EFI_GET_TIME
 	bool "GetTime() runtime service"
 	depends on DM_RTC
diff --git a/lib/efi_loader/efi_variable.c b/lib/efi_loader/efi_variable.c
index cf8b44c535..64b6f033e8 100644
--- a/lib/efi_loader/efi_variable.c
+++ b/lib/efi_loader/efi_variable.c
@@ -420,10 +420,24 @@ void efi_variables_boot_exit_notify(void)
 efi_status_t efi_init_variables(void)
 {
 	efi_status_t ret;
+	u32 exclude;
 
 	ret = efi_var_mem_init();
-	if (ret != EFI_SUCCESS)
-		return ret;
 
-	return efi_var_from_file();
+	/*
+	 * Do not use switch statements in runtime code. The may be
+	 * compiled to tables leading to relocation errors.
+	 */
+	if (ret == EFI_VAR_IN_MEMORY) {
+		/*
+		 * If we found valid variables in memory,
+		 * don't load runtime variables from file.
+		 */
+		exclude = EFI_VARIABLE_RUNTIME_ACCESS;
+	} else if (ret == EFI_SUCCESS) {
+		exclude = 0;
+	} else {
+		return ret;
+	}
+	return efi_var_from_file(exclude);
 }
diff --git a/lib/efi_loader/efi_variables_file.c b/lib/efi_loader/efi_variables_file.c
index 4a918d3fde..c5b84431ac 100644
--- a/lib/efi_loader/efi_variables_file.c
+++ b/lib/efi_loader/efi_variables_file.c
@@ -157,9 +157,11 @@ error:
  * efi_var_restore() - restore EFI variables from buffer
  *
  * @buf:	buffer
+ * @exclude:	if any of these attributes are set, exclude the variable
  * Return:	status code
  */
-static efi_status_t __maybe_unused efi_var_restore(struct efi_var_file *buf)
+static efi_status_t __maybe_unused
+efi_var_restore(struct efi_var_file *buf, u32 exclude)
 {
 	struct efi_var_entry *var, *last_var;
 	efi_status_t ret;
@@ -176,7 +178,8 @@ static efi_status_t __maybe_unused efi_var_restore(struct efi_var_file *buf)
 	while (var < last_var) {
 		u16 *data = var->name + u16_strlen(var->name) + 1;
 
-		if (var->attr & EFI_VARIABLE_NON_VOLATILE && var->length) {
+		if (!(var->attr & exclude) && var->length &&
+		    var->attr & EFI_VARIABLE_NON_VOLATILE) {
 			ret = efi_set_variable_int(var->name, &var->guid,
 						   var->attr, var->length,
 						   data);
@@ -199,9 +202,10 @@ static efi_status_t __maybe_unused efi_var_restore(struct efi_var_file *buf)
  * In case the file does not exist yet or a variable cannot be set EFI_SUCCESS
  * is returned
  *
+ * @exclude:	if any of these attributes are set exclude the variable
  * Return:	status code
  */
-efi_status_t efi_var_from_file(void)
+efi_status_t efi_var_from_file(u32 exclude)
 {
 #ifdef CONFIG_EFI_VARIABLE_FILE_STORE
 	struct efi_var_file *buf;
@@ -226,7 +230,7 @@ efi_status_t efi_var_from_file(void)
 		printf("Failed to load EFI variables\n");
 		goto error;
 	}
-	if (buf->length != len || efi_var_restore(buf) != EFI_SUCCESS)
+	if (buf->length != len || efi_var_restore(buf, exclude) != EFI_SUCCESS)
 		printf("Invalid EFI variables file\n");
 error:
 	free(buf);
diff --git a/lib/efi_loader/efi_variables_mem.c b/lib/efi_loader/efi_variables_mem.c
index a5d1b3b52b..6fd48230da 100644
--- a/lib/efi_loader/efi_variables_mem.c
+++ b/lib/efi_loader/efi_variables_mem.c
@@ -289,7 +289,7 @@ efi_var_mem_notify_virtual_address_map(struct efi_event *event, void *context)
 /**
  * efi_var_mem_init() - set-up variable list
  *
- * Return:	status code
+ * Return:	status code, EFI_VAR_IN_MEMORY if valid data in memory
  */
 efi_status_t efi_var_mem_init(void)
 {
@@ -297,6 +297,25 @@ efi_status_t efi_var_mem_init(void)
 	efi_status_t ret;
 	struct efi_event *event;
 
+#ifdef CONFIG_EFI_VAR_MEM_ADDR
+	memory = CONFIG_EFI_VAR_MEM_ADDR;
+	ret = efi_allocate_pages(EFI_ALLOCATE_ADDRESS,
+				 EFI_RUNTIME_SERVICES_DATA,
+				 efi_size_in_pages(EFI_VAR_BUF_SIZE),
+				 &memory);
+	if (ret != EFI_SUCCESS)
+		return ret;
+	efi_var_buf = (struct efi_var_file *)(uintptr_t)memory;
+	if (efi_var_buf->magic == EFI_VAR_FILE_MAGIC &&
+	    efi_var_buf->crc32 == crc32(0, (u8 *)efi_var_buf->var,
+					efi_var_buf->length -
+					sizeof(struct efi_var_file))) {
+		return EFI_VAR_IN_MEMORY;
+	}
+
+	if (ret != EFI_SUCCESS)
+		return ret;
+#else
 	ret = efi_allocate_pages(EFI_ALLOCATE_ANY_PAGES,
 				 EFI_RUNTIME_SERVICES_DATA,
 				 efi_size_in_pages(EFI_VAR_BUF_SIZE),
@@ -304,6 +323,7 @@ efi_status_t efi_var_mem_init(void)
 	if (ret != EFI_SUCCESS)
 		return ret;
 	efi_var_buf = (struct efi_var_file *)(uintptr_t)memory;
+#endif
 	memset(efi_var_buf, 0, EFI_VAR_BUF_SIZE);
 	efi_var_buf->magic = EFI_VAR_FILE_MAGIC;
 	efi_var_buf->length = (uintptr_t)efi_var_buf->var -
@@ -320,5 +340,5 @@ efi_status_t efi_var_mem_init(void)
 			       NULL, &event);
 	if (ret != EFI_SUCCESS)
 		return ret;
-	return ret;
+	return EFI_SUCCESS;
 }
-- 
2.20.1

