From 9a55828d5eb69798b2de363d718345fe6ebb4abf Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 1 Feb 2020 13:56:53 +0100
Subject: [PATCH 1/1] efi_loader: architecture specific UEFI setup

RISC-V patches are developed for OpenSBI and Linux to replace random boot
by sequential CPU bring-up.

In this scenario the id of the active hart has to be passed from boot stage
to boot stage. Using a UEFI variable would provide an easy implementation.

This patch provides a weak function that is called at the end of the setup
of the UEFI sub-system. This patch can be used to create architecture
specific UEFI variables or configuration tables.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/efi_loader.h       |  3 +++
 lib/efi_loader/efi_setup.c | 15 +++++++++++++++
 2 files changed, 18 insertions(+)

diff --git a/include/efi_loader.h b/include/efi_loader.h
index d4c59b54c4..d87de85e83 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -116,6 +116,9 @@ extern efi_uintn_t efi_memory_map_key;
 extern struct efi_runtime_services efi_runtime_services;
 extern struct efi_system_table systab;
 
+/* Architecture specific initialization of the UEFI system */
+efi_status_t efi_setup_arch_specific(void);
+
 extern struct efi_simple_text_output_protocol efi_con_out;
 extern struct efi_simple_text_input_protocol efi_con_in;
 extern struct efi_console_control_protocol efi_console_control;
diff --git a/lib/efi_loader/efi_setup.c b/lib/efi_loader/efi_setup.c
index de7b616c6d..9bbaa344ec 100644
--- a/lib/efi_loader/efi_setup.c
+++ b/lib/efi_loader/efi_setup.c
@@ -22,6 +22,17 @@ void __weak allow_unaligned(void)
 {
 }
 
+/**
+ * efi_setup_arch_specific() - architecture specific UEFI setup
+ *
+ * This routine can be used to define architecture specific variables
+ * or configuration tables, e.g. HART id for RISC-V
+ */
+efi_status_t __weak  efi_setup_arch_specific(void)
+{
+	return EFI_SUCCESS;
+}
+
 /**
  * efi_init_platform_lang() - define supported languages
  *
@@ -178,6 +189,10 @@ efi_status_t efi_init_obj_list(void)
 	ret = efi_reset_system_init();
 	if (ret != EFI_SUCCESS)
 		goto out;
+	
+	ret = efi_setup_arch_specific();
+	if (ret != EFI_SUCCESS)
+		goto out;
 
 out:
 	efi_obj_list_initialized = ret;
-- 
2.24.1

